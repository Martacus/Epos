buildscript {
    repositories {
        jcenter()
        maven {
            name "forge"
            url "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.wynprice.cursemaven" version "2.1.1"
    id 'java'
    id 'idea'
    id 'maven'
}

apply plugin: "net.minecraftforge.gradle"

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        resources {
            include '**/**'
            //Add the generated resources
            srcDirs += 'src/datagen/generated'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    datagen {
        java.srcDirs = ['src/datagen/java']
        resources.srcDirs = ['src/datagen/resources']
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
    }
    test {
        compileClasspath += sourceSets.api.output + sourceSets.main.output
        runtimeClasspath += sourceSets.api.output + sourceSets.main.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    def compileExtenders = [apiCompile, testCompile, datagenCompile]
    def compileOnlyExtenders = [apiCompileOnly, testCompileOnly, datagenCompileOnly]
    def runtimeOnlyExtenders = [apiRuntimeOnly, datagenRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
}

version = "${minecraft_version}-" + getVersion()
group = "${group}"
archivesBaseName = "${archive}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            mods {
                epos {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        server {
            workingDirectory project.file("run")
            mods {
                epos {
                    sources(sourceSets.main, sourceSets.api)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'
            args '--all', '--output', file('src/datagen/generated'),
                    '--mod', 'epos', '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                epos {
                    sources(sourceSets.main, sourceSets.api, sourceSets.datagen)
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://cdn.hrzn.studio/maven/'
    }
    maven {
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    compile fg.deobf("com.hrznstudio:titanium:${minecraft_version}-${titanium_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand "version": base_version, "mc_version": minecraft_version, "forge_version": min_forge_version,
                "loader_version": loader_version
    }
    into "$buildDir/resources/main/"
}

processResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResources)
}

task srcJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    classifier = "sources"
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = "api"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${title}",
                "Specification-Vendor"    : "${team}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${team}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "ModSide"                 : "BOTH",
        ],)
    }
}

artifacts {
    archives javadocJar
    archives srcJar
    archives apiJar
}

reobf {
    apiJar { classpath = sourceSets.api.compileClasspath }
    srcJar { classpath = sourceSets.main.compileClasspath }
    javadocJar { classpath = sourceSets.main.compileClasspath }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    version = '4.9'
}

String getVersion() {
    String version = "${base_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}